---
layout: post
title:  "112 reci notes"
date:   2015-09-11
categories: CS112
---

A spreadsheet keeps track of student scores on all the exams in a course.  Matrix `r x c` where r is number of students,  and c is exams.
Consider an algorithm that computes the total score on all exams for each student, and the average class score on each exam.  

What are the basic operations you would count toward the running time?
\\((c_n -1) * r) , ((r-1 )* c) + c\\)

What is the worst-case running time as a total count (not big O) of these basic operations?
\\( c* r + (r*c)/r//)

What is the big O running time?
two dimensional, O(n^2)

Is your algorithm linear, quadratic, or some other order?
linear w/ respect to array dimension

A card game program keeps a deck of cards in an array. 
Give an algorithm to "unshuffle" the deck so that all the cards of a suit are grouped together, and within each suit, the cards are in ascending order or rank--consider the ace as the lowest ranked card. 
Since there are only 52 cards, space is not an issue so you can use extra space if needed. 
The only constraint is that your algorithm be as fast as possible.

Have 4 arrays (1 per suite). 
moving from one array to another is costliest 

What is the worst case big O running time of your algorithm? 
O(42) 
What are the basic operations you used in your analysis? Is the average big O running time different from the worst case?
moving from one array to the other, and it's the same

Two people compare their favorite playlists for matching songs.  
The first playlist has n songs, and the second has m.  Each is stored in an array, in no particular order. 

Describe an algorithm to find the common songs in these lists (intersection), WITHOUT sorting either list.
Make a third array of size m + n; directly copy larger array, then search using smaller array. 

What is the worst-case big O running time of your algorithm?  Make sure to state the basic operations used in your analysis of running time.
O(m x n) , size of input is m+n , so O(n^2);

What is the best-case big O running time of your algorithm?  Explain clearly, including all book-keeping needed to achieve this best case.
Length of larger array, if every song on smaller playlist is same and first value on bigger playlist.

Now suppose you could sort either or both arrays (as part of your algorithm). Repeat the worst-case and best-case analysis for the big O running time. (The running time must include the time to sort.)
Merge sort (n log(n)) x 2, then merge into third array
 


Time and Memory Cost
Big O - how fast a function grows
n - input size 

\\(T(n) = 4 n^2 -2n +2 < = 4n^2 \quad 2n >= 2 \quad n> = 1 \\)

big_o.pdf

Order:

\\(O(1) < O(logn) < O((logn)^e) < O(n)< O(n^2) < O(n^e) < O(n^n) \\)


